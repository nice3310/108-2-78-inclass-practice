class(chinese)
factor(chi,order=T)->chinese
chi<-order(factor(table$`國文`,levels=table$`國文`,order=T))
chi
class(chi)
factor(chi,order=T)->chinese
levels(chinese)
class(chinese)
class(chi)
levels(chinese)
class(levels(chinese))
table$`國文`
chinese
table$`國文`
chi<-order(factor(table$`國文`,levels=table$`國文`,ordered=T))
chi<-order(factor(table$`國文`,levels=table$`國文`,ordered=T))
chi<-order(factor(table$`國文`,levels=table$`國文`,ordered=T))
class(chi)
factor(chi,order=T)->chinese
class(levels(chinese))
class(chinese)
chinese
table$`國文`
chinese
str(students10)
ntpuornot<-str_detect(students10$`志願`,"北大")
ntpuornot
ntpu_namelist
students10$`姓名`[ntpuornot]->ntpu_namelist
ntpu_namelist
class(chinese)
class(levels(chinese))
chinese
str(students10)
chiok<-students10$`國文`>=12
chiok
bothok<-(students10$`英文`+students10$`數學`)>=26
students10$`姓名`[ntpuornot][chiok][bothok]
students10$`姓名`[ntpuornot][chiok][bothok]
bothok<-(students10$`英文`+students10$`數學`)>=26
bothok<-(students10$`英文`+students10$`數學`)>=26
bothok
ntpuornot*chiok*bothok->great
students10$`姓名`[great]
students10$`姓名`[great]->ntpu_econtpu_eco
ntpu_econtpu_eco
str(students10)
ntpu<-str_detect(students10$`志願`,"北大經濟")
student<-students10$`姓名`[ntpu]
student<-students10$`姓名`[ntpu]
student<-students10$`姓名`[ntpu]
ntpu_econtpu_eco
students10$`姓名`[great]->ntpu_econtpu_eco
ntpu_econtpu_eco
ntpuornot*chiok->okk
okk*bothok->okkk
students10$`姓名`[okkk]->ntpu_econtpu_eco
ntpu_econtpu_eco
students10$`姓名`[ntpuornot][chiok][bothok]->ntpu_econtpu_eco
ntpu_econtpu_eco
chiok<-students10[ntpu_namelist]`國文`>=12
chiok<-students10[ntpu_namelist]$`國文`>=12
chiok<-students10[ntpu_namelist]$`國文`>=12
bothok<-(students10[ntpu_namelist]$`英文`+students10[ntpu_namelist]$`數學`)>=26
students10$`姓名`[ntpuornot][chiok][bothok]->ntpu_econtpu_eco
ntpu_econtpu_eco
students10$`姓名`[ntpuornot][chiok][bothok]->ntpu_econtpu_eco
ntpu_econtpu_eco
ntpu_econtpu_eco
students10$`姓名`[ntpuornot][chiok][bothok]->ntpu_econtpu_eco
bothok<-(students10[ntpu_namelist]$`英文`+students10[ntpu_namelist]$`數學`)>=26
chiok<-students10[ntpu_namelist]$`國文`>=12
ntpu_econtpu_eco
chiok<-students10[ntpuornot]$`國文`>=12
bothok<-(students10[ntpuornot]$`英文`+students10[ntpuornot]$`數學`)>=26
students10$`姓名`[ntpuornot][chiok][bothok]->ntpu_econtpu_eco
ntpu_econtpu_eco
chiok<-students10$`姓名`[ntpuornot]$`國文`>=12
chiok<-students10$`國文`[ntpuornot]>=12
bothok<-(students10$`英文`[ntpuornot]+students10$`數學`[ntpuornot])>=26
students10$`姓名`[ntpuornot][chiok][bothok]->ntpu_econtpu_eco
ntpu_econtpu_eco
ntpu<-str_detect(students10$`志願`,"北大經濟")
ntpu<-str_detect(students10$`志願`,"北大經濟")
student<-students10$`姓名`[ntpu]
str_detect(namelist,`student`)
str_detect(namelist,`student`)
`student`%in%`namelist`
`student`%in%`namelist`
`student`%in%`namelist`->con
student[con]
paste0(c("恭喜"),`realstudent`,"同學錄取國立臺北大學經濟系")
student[con]->realstudent
paste0(c("恭喜"),`realstudent`,"同學錄取國立臺北大學經濟系")
paste0(c("恭喜"),c(" "),`realstudent`,c(" "),"同學錄取國立臺北大學經濟系")
paste0(c("恭喜"),c(" "),`realstudent`,c(" "),"同學錄取國立臺北大學經濟系")->congrats
congrats
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
str(badEmployers$law)
violatedArticles<-levels(factor(badEmployers$law))
violatedArticles
str(badEmployers$law)
violatedArticles<-levels(factor(badEmployers$law))
violatedArticles
table_countsByArticle<-table(badEmployers$law)
names(table_countsByArticle)
table_countsByArticle
mostViolatedArticle<-table_countsByArticle[pickmax]
pickmax<-table_countsByArticle==max(table_countsByArticle)
pickmax
mostViolatedArticle<-table_countsByArticle[pickmax]
mostViolatedArticle
mostViolatedArticle
table(badEmployers$lawContent)->tablecontent
tablecontent==max(tablecontent)->maxcontent
tablecontent[maxcontent]->intermax
names(intermax)->mostViolatedArticle_content
mostViolatedArticle_content
mostViolatedArticle_content
date<-badEmployers$dt
datemonth<-month(date)
table (datemonth)->tablemonth
tablemonth
tablemonth==max(tablemonth)->max
tablemonth[max]->popular
names(popular)->popularSentenceMonth
popularSentenceMonth
popularSentenceMonth
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
table$`國文`
chi<-order(factor(table$`國文`,levels=table$`國文`,ordered=T))
class(chi)
factor(chi,order=T)->chinese
class(levels(chinese))
class(chinese)
chinese
chinese
str(students10)
ntpuornot<-str_detect(students10$`志願`,"北大")
students10$`姓名`[ntpuornot]->ntpu_namelist
ntpu_namelist
ntpu_namelist
chiok<-students10$`國文`[ntpuornot]>=12
bothok<-(students10$`英文`[ntpuornot]+students10$`數學`[ntpuornot])>=26
students10$`姓名`[ntpuornot][chiok][bothok]->ntpu_econtpu_eco
ntpu_econtpu_eco
ntpu_econtpu_eco
str(students10)
ntpu<-str_detect(students10$`志願`,"北大經濟")
student<-students10$`姓名`[ntpu]
`student`%in%`namelist`->con
student[con]->realstudent
paste0(c("恭喜"),c(" "),`realstudent`,c(" "),"同學錄取國立臺北大學經濟系")->congrats
congrats
congrats
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
`ntpuornot`*`chiok`*`bothok`->logii
`ntpuornot`*`chiok`*`bothok`->logii
`ntpuornot`*`chiok`*`bothok`->logii
ntpuornot*chiok*bothok->logii
students10$`姓名`[`ntpuornot`*`chiok`*`bothok`]
students10$`姓名`[`ntpuornot`*`chiok`*`bothok`]
students10$`姓名`[ntpuornot*chiok*bothok]
students10$`姓名`[ntpuornot*chiok*bothok]
chiok<-students10$`國文`[ntpuornot]>=12
students10$`姓名`[ntpuornot*chiok*bothok]
students10$`姓名`[ntpuornot][chiok][bothok]->ntpu_econtpu_eco
ntpu_econtpu_eco
students10$`姓名`[ntpuornot*chiok*bothok]
ntpuornot<-str_detect(students10$`志願`,"北大")
ntpuornot
chiok<-students10$`國文`[ntpuornot]>=12
chiok
chiok<-students10$`國文`>=12
chiok
bothok<-(students10$`英文`+students10$`數學`)>=26
bothok
ntpuornot*chiok
ntpuornot*chiok*bothok
ntpuornot*chiok*bothok
ntpuornot*chiok*bothok->right
ntpuornot*chiok*bothok->right
students10$`姓名`[right]
students10$`姓名`[right]
students10$`姓名`[right]
ntpuornot*chiok*bothok->right
class(right)
as.logical(right)->realright
students10$`姓名`[realright]
ntpu_econtpu_eco
students10$`姓名`[realright]
students10$`姓名`[realright]->ntpu_econtpu_eco
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
str(badEmployers$law)
violatedArticles<-levels(factor(badEmployers$law))
violatedArticles
table_countsByArticle<-table(badEmployers$law)
names(table_countsByArticle)
table_countsByArticle
pickmax<-table_countsByArticle==max(table_countsByArticle)
pickmax
mostViolatedArticle<-table_countsByArticle[pickmax]
mostViolatedArticle
table(badEmployers$lawContent)->tablecontent
tablecontent==max(tablecontent)->maxcontent
tablecontent[maxcontent]->intermax
names(intermax)->mostViolatedArticle_content
mostViolatedArticle_content
date<-badEmployers$dt
datemonth<-month(date)
table (datemonth)->tablemonth
tablemonth
tablemonth==max(tablemonth)->max
tablemonth[max]->popular
names(popular)->popularSentenceMonth
popularSentenceMonth
popularSentenceMonth
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
table$`國文`
chi<-order(factor(table$`國文`,levels=table$`國文`,ordered=T))
class(chi)
factor(chi,order=T)->chinese
class(levels(chinese))
class(chinese)
chinese
str(students10)
ntpuornot<-str_detect(students10$`志願`,"北大")
ntpuornot
students10$`姓名`[ntpuornot]->ntpu_namelist
ntpu_namelist
chiok<-students10$`國文`>=12
bothok<-(students10$`英文`+students10$`數學`)>=26
ntpuornot*chiok*bothok->right
as.logical(right)->realright
students10$`姓名`[realright]->ntpu_econtpu_eco
ntpu_econtpu_eco
str(students10)
ntpu<-str_detect(students10$`志願`,"北大經濟")
student<-students10$`姓名`[ntpu]
`student`%in%`namelist`->con
student[con]->realstudent
paste0(c("恭喜"),c(" "),`realstudent`,c(" "),"同學錄取國立臺北大學經濟系")->congrats
congrats
congrats
ntpu_econtpu_eco
ntpu_namelist
ntpu_econtpu_eco
ntpu_econtpu_eco
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
back_regex<-"[^弟]"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-[^弟]
back_regex<-"[^弟]"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"[^弟]"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"[兄^弟]"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-glue::glue("[^弟]")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)" back_regex)
pattern <- paste0("段(兄|兄弟)" , back_regex)
str_extract_all(twoNames, pattern)
back_regex<-("[^弟^,]")
pattern <- paste0("段(兄|兄弟)" , back_regex)
back_regex<-("[^弟^,]")
str_extract_all(twoNames, pattern)
back_regex<-(?="^[弟]")
back_regex<-(?={^[弟]})
back_regex<-(?={"^[弟]"})
back_regex<-(?=弟)
back_regex<-("[^弟]$")
pattern <- paste0("段(兄|兄弟)" , back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)" , back_regex)
str_extract_all(twoNames, pattern)
back_regex<-("[^弟$]")
pattern <- paste0("段(兄|兄弟)" , back_regex)
str_extract_all(twoNames, pattern)
str_view_all(twoNames,"段兄")
str_extract(twoNames,"段兄")
str_extract(twoNames,"段兄")
str_extract(twoNames,"段兄|段兄弟")
str_extract(twoNames,"段兄|段兄弟")
str_extract(twoNames,"段|段兄弟")
str_extract(twoNames,"段|段兄弟")
back_regex<-("[^弟]")
str_extract(twoNames,"段|段兄弟")
str_extract_all(twoNames,"段|段兄弟")
str_extract_all(twoNames,"段^兄弟|段兄弟")
str_extract_all(twoNames,"段^兄弟|段兄弟")
str_extract_all(twoNames,"段^[兄弟[|段兄弟")
str_extract_all(twoNames,"段^[兄弟]|段兄弟")
str_extract_all(twoNames,"段^[兄弟]|段兄弟")
str_extract_all(twoNames,"段|段兄弟")
str_extract_all(twoNames,"段兄弟|段兄弟")
str_extract_all(twoNames,"段兄^弟|段兄弟")
str_extract_all(twoNames,"段兄^[弟]|段兄弟")
str_extract_all(twoNames,"[段兄|段兄弟]")
str_extract_all(twoNames,"["段兄"|"段兄弟"]")
str_extract_all(twoNames,"[段兄|段兄弟]")
back_regex<-("[^弟]")
back_regex<-"[^弟]"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract_all(twoNames, "段(兄[^弟]|兄弟)")
str_extract_all(twoNames, "段(^兄[^弟]|兄弟)")
str_extract_all(twoNames, "段(兄[^弟]$|兄弟)")
str_extract_all(twoNames, "段(兄[^弟]|兄弟)")
back_regex<-[^弟]
back_regex<-([^弟])
back_regex<-"[^弟]"
back_regex<-"[^弟]$"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"^[^弟]"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract_all(twoNames, "段(兄(?!弟)|兄弟)")
str_extract_all(twoNames, "段(兄(?!弟)|兄弟)")
back_regex<-"[?!弟]"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract_all(twoNames, "段(兄(?!弟)|兄弟)")
back_regex<-"^{?!弟}"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"^(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"^(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils[[5]][[1]])
semiGodsSemiDevils$data$[1]$text[3]
str(semiGodsSemiDevils)
semiGodsSemiDevils$data$[[1]]$text[3]
str(semiGodsSemiDevils)
semiGodsSemiDevils$data$[1]
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[1]
semiGodsSemiDevils$data[1]$text[30]
semiGodsSemiDevils$data[1]$text[3]
semiGodsSemiDevils$data[1]$text[3]
semiGodsSemiDevils$data[1]$text[3]
semiGodsSemiDevils$data[1]
semiGodsSemiDevils$data[1]$p2
semiGodsSemiDevils$data[1]$p2
semiGodsSemiDevils$data[1][3]
semiGodsSemiDevils$data[1]
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[3]
semiGodsSemiDevils$data[2]
semiGodsSemiDevils$data[1
semiGodsSemiDevils$data[1
semiGodsSemiDevils$data[1}
semiGodsSemiDevils$data[1]
semiGodsSemiDevils$data[3,2]
semiGodsSemiDevils$data[2,3]
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[1][3,2]
semiGodsSemiDevils$data[1][3,2]
semiGodsSemiDevils$data[1]
semiGodsSemiDevils$data[1][p2,text]
semiGodsSemiDevils$data[1][$p2,$text]
semiGodsSemiDevils$data[1][p2,text]
semiGodsSemiDevils$data[1][1,1]
semiGodsSemiDevils$data[1]
semiGodsSemiDevils$data[1][2,3]
context_picked<-
### 2.2
context_picked把內文存在一個字串元素裡（很大的一串字串）。每段其實有「兩個空格」區隔如下所示：
```{r}
textExample <- c("段1......。　　段2....。")
```
`str_split(string, pattern)`可以將文字string依pattern找到的字組切割，切割後會形成一個list。請依「兩個空格」來切割context_picked並存在context_picked_split (class list)。（註：regex的一個空格是"\\s"）
hint: str(context_picked_split) 會長得像
```
List of 1
$ : chr [1:214] "第一回　青衫磊落險峯行" "青光閃動，一柄青鋼劍倏地刺出，指向中年漢子左肩，使劍少年不等劍招用老，腕抖劍斜，劍鋒已削向那漢子右頸。那中年漢"|
```
```{r ans22}
# context_picked_split
### 2.3
段譽在內文被以"段譽、段兄、段兄弟、段大哥、段相公、段君，及姓段的小子"稱呼過，請使用`str_extract_all()`粹取出context_picked_split底下各段中段譽被提到的所有稱呼, 並存在mention_duan （class list, of 214 elements）裡。（小心context_picked_split要進下一層才會是各段的字串向量）
semiGodsSemiDevils$data[1]
semiGodsSemiDevils$data[1]$2
str(semiGodsSemiDevils)
semiGodsSemiDevils$data
semiGodsSemiDevils$data[2,3]
semiGodsSemiDevils$data[1,2]
semiGodsSemiDevils
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[1][1,]
semiGodsSemiDevils$data[1][1,2]
semiGodsSemiDevils$data[1][1,2,3]
semiGodsSemiDevils$data[1][1]
semiGodsSemiDevils$data[1][1][1]
semiGodsSemiDevils$data[1,2]
semiGodsSemiDevils$data$text
semiGodsSemiDevils$data$text[2]
str(semiGodsSemiDevils)
semiGodsSemiDevils[[5]]
semiGodsSemiDevils[[5]][1]
semiGodsSemiDevils[[5]][1,2]
semiGodsSemiDevils[[5]][1:2]
semiGodsSemiDevils[[5]][1,2]
semiGodsSemiDevils[[5]][1]
semiGodsSemiDevils[[5]][3]
semiGodsSemiDevils[[5]][3]
as.list(str(semiGodsSemiDevils))
as.list(str(semiGodsSemiDevils))->listth
as.list(semiGodsSemiDevils)->listth
as.list(semiGodsSemiDevils)->listth
as.list(semiGodsSemiDevils$data[[1]])
as.list(semiGodsSemiDevils$data[[1]])->listth
as.list(semiGodsSemiDevils$data[[1]])->semiGodsSemiDevils$data[[1]]
as.list(semiGodsSemiDevils$data[[1]])->semiGodsSemiDevils$data[[1]]
semiGodsSemiDevils$data[[1]]$section==p2->pick
semiGodsSemiDevils$data[[1]]$section=="p2"->pick
pick
as.list(semiGodsSemiDevils$data[[1]])->semiGodsSemiDevils$data[[1]]
semiGodsSemiDevils$data[[1]]$section==semiGodsSemiDevils$data[[1]]$section$p2->pick
semiGodsSemiDevils
semiGodsSemiDevils$data[[1]]
semiGodsSemiDevils$data[[1]]$section==semiGodsSemiDevils$data[[1]]$section[3]
semiGodsSemiDevils$data[[1]]$section==semiGodsSemiDevils$data[[1]]$section[3]
semiGodsSemiDevils$data[[1]]$section==semiGodsSemiDevils$data[[1]]$section[3]->pick
pick
semiGodsSemiDevils$data[[1]]$text[pick]
semiGodsSemiDevils$data[[1]]$text[pick]->context_picked
semiGodsSemiDevils$data[[1]]$text[pick]->context_picked
textExample <- c("段1......。　　段2....。")
pattern2 <- "\\s\\s"
str_split(context_picked, pattern2)
str_split(context_picked, pattern2)
str(ok)
str_split(context_picked, pattern2)->ok
str(ok)
str_extract_all(context_picked,"段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子")
str_extract_all(context_picked,"段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子")->haha
str(haha)
str_extract_all(context_picked,"段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子")->haha
context_picked_split
str_split(context_picked, pattern2)->context_picked_split
context_picked_split
str_extract_all(context_picked[[1]],"段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子")->haha
str(haha)
str_extract_all(context_picked[[1]],"段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子")->haha
str(haha)
str_extract_all(context_picked[1],"段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子")->haha
str(haha)
str_extract_all(context_picked[1],"段(譽|兄|兄弟|大哥|相公|君|姓段的小子")->haha
context_picked_split
str_extract_all(context_picked_split[[1]],"段譽|段兄|段兄弟|段大哥|段相公|段君|及姓段的小子")
str_extract_all(context_picked_split[[1]],"段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子")
str_extract_all(context_picked_split[[1]],"段譽|段兄(?!弟)|段兄弟|段大哥|段相公|段君|姓段的小子")
str_extract_all(context_picked_split[[1]],"段譽|段兄(?!弟)|段兄弟|段大哥|段相公|段君|姓段的小子")->mention_duan
mention_duan
unlist(mention_duan)
unlist(mention_duan)->un
table(un)
table(unlist(mention_duan))->un
table(unlist(mention_duan))->table_duan
table_duan
